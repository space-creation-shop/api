#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
class Bourse {
  constructor(nomMonnaie, prixInitial, quantiteEnCirculation) {
    this.nomMonnaie = nomMonnaie;
    this.prixInitial = prixInitial;
    this.prixActuel = prixInitial;
    this.quantiteEnCirculation = quantiteEnCirculation;
    this.poidsMontee = 0.7; // Poids initial de la montée de la bourse (entre 0 et 1)
    this.poidsDescente = 0.3; // Poids initial de la descente de la bourse (entre 0 et 1)
  }

  // Méthode pour générer un prix aléatoire avec prise en compte des poids
  genererPrixAleatoire() {
    const random = Math.random(); // Nombre aléatoire entre 0 et 1

    if (random < this.poidsMontee) {
      this.prixActuel *= 1.02; // Augmentation de 2%
    } else if (random < this.poidsMontee + this.poidsDescente) {
      this.prixActuel *= 0.98; // Diminution de 2%
    }

    this.prixActuel *= (1 - this.quantiteEnCirculation / 10000);

    // Ajustement des poids en fonction de la valeur de la bourse
    if (this.prixActuel > this.prixInitial) {
      this.poidsMontee -= 0.01; // Réduction du poids de la montée
      this.poidsDescente += 0.01; // Augmentation du poids de la descente
    } else {
      this.poidsMontee += 0.01; // Augmentation du poids de la montée
      this.poidsDescente -= 0.01; // Réduction du poids de la descente
    }
    console.log(this)
    // Limiter les poids entre 0 et 1
    this.poidsMontee = Math.max(0, Math.min(1, this.poidsMontee));
    this.poidsDescente = Math.max(0, Math.min(1, this.poidsDescente));
  }

  // Méthode pour obtenir le prix actuel
  getPrixActuel() {
    return this.prixActuel.toFixed(2); // Rendre le prix actuel à 2 décimales
  }
}


const socketIO = require('socket.io');


const server = http.createServer(app);
const io = socketIO(server);


/**
 * Create HTTP server.
 */

const bourse = new Bourse("test coin", 100, 10);

/**
 * Listen on provided port, on all network interfaces.
 */
io.on('connection', (socket) => {
  console.log('Nouvelle connexion WebSocket');

  // Envoyer la valeur de la bourse toutes les secondes
  setInterval(() => {

    bourse.genererPrixAleatoire(); // Valeur aléatoire pour l'exemple
    socket.emit('nouvelleValeur', bourse.getPrixActuel());
  }, 1000);
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}