#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const { v4: uuidv4 } = require('uuid');

class BankAccount {
  constructor(initialBalance = 0) {
    this.id = uuidv4();
    this.balance = initialBalance;
  }

  deposit(amount) {
    this.balance += amount;
  }

  withdraw(amount) {
    if (amount <= this.balance) {
      this.balance -= amount;
      return true;
    } else {
      return false;
    }
  }

  getBalance() {
    return this.balance.toFixed(2);
  }
}

class Enterprise {
  constructor(name, initialStockPrice) {
    this.name = name;
    this.stockPrice = initialStockPrice;
    this.availableShares = 100;
  }

  updateStockPrice(newPrice) {
    this.stockPrice = newPrice;
  }

  getStockPrice() {
    return this.stockPrice.toFixed(2);
  }

  buyShares(amount) {
    if (amount <= this.availableShares) {
      this.availableShares -= amount;
      return true;
    } else {
      return false;
    }
  }

  sellShares(amount) {
    this.availableShares += amount;
  }

  getAvailableShares() {
    return this.availableShares;
  }
}

class Bourse {
  constructor(nomMonnaie, prixInitial, quantiteEnCirculation, maxqqt) {
    this.nomMonnaie = nomMonnaie;
    this.prixInitial = prixInitial;
    this.prixActuel = prixInitial;
    this.quantiteEnCirculation = quantiteEnCirculation;
    this.poidsMontee = 0.2;
    this.poidsDescente = 0.9;
    this.bankAccounts = [];
    this.enterprises = [];
  }

  addBankAccount(initialBalance = 0) {
    const newAccount = new BankAccount(initialBalance);
    this.bankAccounts.push(newAccount);
    return newAccount.id;
  }

  deleteBankAccount(accountId) {
    const accountIndex = this.bankAccounts.findIndex((acc) => acc.id === accountId);
    if (accountIndex !== -1) {
      this.bankAccounts.splice(accountIndex, 1);
      console.log(`Bank account ${accountId} has been deleted.`);
    } else {
      console.log("Account not found.");
    }
  }

  genererPrixAleatoire() {
    const random = Math.random() * 2;

    if (random < this.poidsMontee) {
      this.prixActuel *= 1.02;
    } else if (random < this.poidsMontee + this.poidsDescente) {
      this.prixActuel *= 0.98;
    }

    this.prixActuel *= 1 - this.quantiteEnCirculation / maxqqt;

    if (this.prixActuel > this.prixInitial) {
      this.poidsMontee -= 0.01;
      this.poidsDescente += 0.01;
    } else {
      this.poidsMontee += 0.01;
      this.poidsDescente -= 0.01;
    }

    this.poidsMontee = Math.max(0, Math.min(1, this.poidsMontee));
    this.poidsDescente = Math.max(0, Math.min(1, this.poidsDescente));

    const priceChange = this.prixActuel - this.prixInitial;
    this.enterprises.forEach((enterprise) => {
      if (priceChange > 0) {
        enterprise.updateStockPrice(enterprise.stockPrice + priceChange);
      } else if (priceChange < 0) {
        const absPriceChange = Math.abs(priceChange);
        enterprise.updateStockPrice(Math.max(0, enterprise.stockPrice - absPriceChange));
      }
    });
  }

  updateEnterpriseStockPrice(enterpriseIndex, newPrice) {
    const enterprise = this.enterprises[enterpriseIndex];
    if (enterprise) {
      enterprise.updateStockPrice(newPrice);
      console.log(`Stock price for ${enterprise.name} updated to $${newPrice.toFixed(2)}.`);
    } else {
      console.log("Invalid enterprise index.");
    }
  }

  

  getEnterpriseStockPrice(enterpriseIndex) {
    // ... Votre code pour obtenir le prix de l'action de l'entreprise ...
    const enterprise = this.enterprises[enterpriseIndex];
    return enterprise ? enterprise.getStockPrice() : "Invalid enterprise index.";
  
  }

  buyShares(accountId, enterpriseIndex, amount) {
    const account = this.bankAccounts.find((acc) => acc.id === accountId);
    const enterprise = this.enterprises[enterpriseIndex];

    if (!account || !enterprise) {
      console.log("Invalid account ID or enterprise index.");
      return;
    }

    const totalCost = enterprise.stockPrice * amount;
    const purchaseSuccess = account.withdraw(totalCost);

    if (purchaseSuccess && enterprise.buyShares(amount)) {
      console.log(`Purchase of ${amount} shares of ${enterprise.name} successful.`);
    } else {
      console.log(`Purchase failed. Insufficient balance or available shares.`);
    }
  }

  sellShares(accountId, enterpriseIndex, amount) {
    const account = this.bankAccounts.find((acc) => acc.id === accountId);
    const enterprise = this.enterprises[enterpriseIndex];

    if (!account || !enterprise) {
      console.log("Invalid account ID or enterprise index.");
      return;
    }

    const availableShares = enterprise.getAvailableShares();
    if (amount > availableShares) {
      console.log(`Sell failed. Not enough shares available for ${enterprise.name}.`);
      return;
    }

    const earnings = enterprise.stockPrice * amount;
    account.deposit(earnings);
    enterprise.sellShares(amount);
    console.log(`Sale of ${amount} shares of ${enterprise.name} successful.`);
  }
}

  




const socketIO = require('socket.io');


const server = http.createServer(app);
const io = socketIO(server);


/**
 * Create HTTP server.
 */

const bourse = new Bourse("test coin", 100, 1e4,1e5);

/**
 * Listen on provided port, on all network interfaces.
 */
io.on('connection', (socket) => {
  console.log('Nouvelle connexion WebSocket');

  // Envoyer la valeur de la bourse toutes les secondes
  setInterval(() => {

    bourse.genererPrixAleatoire(); // Valeur alÃ©atoire pour l'exemple
    socket.emit('nouvelleValeur', bourse.getPrixActuel());
  }, 1000);
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      
      break;
    default:
      return error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}